enum EventType {
  TRYOUT
  GAME
  LEAGUE
  TOURNAMENT
  TRAINING
}

enum SurfaceType {
  TURFPOOR
  TURFOKAY
  TURFGOOD
  TURFEXCELLENT
  GRASSPOOR
  GRASSOKAY
  GRASSGOOD
  GRASSEXCELLENT
  HARDFLOOR
  SAND
  NAILS
  QUICKSAND
}

enum FieldPlayerOccupancySize {
  SMALL
  MEDIUM
  FULLSIZE
}

enum GenderType {
  MALE
  FEMALE
}

enum ModelType {
  USER
  ORGANIZATION
  EVENT
}

type User @model {
  id: ID!
  location: Location
  player: Player
  organizer: Organizer
  coach: Coach
  referee: Referee
  name: String
  phone: String
  email: String
  username: String
  birthdate: String
  gender: String
  status: String
  last_login: Int
  last_updated: Int
  images: [Image] @relation
  events: [Event] @relation
}

type Coach @model  {
  id: ID!
  user: User
}

type Referee @model  {
  id: ID!
  user: User
}

type Organizer @model  {
  id: ID!
  user: User
}

type Player @model  {
  id: ID!
  playerRating: String
  wagerRating: String
  wagers: [Wager] @relation
  events: [Event] @relation
  teams: [Team] @relation
  competitiveLevel: String
  ratings: String
  hasRating: String
  showRating: String
  hasSubscription: String
  user: User
  sponsors: [Sponsor] @relation
}

# a payment is attached to event
# use payment object to create payment screen details for event
type Payment @model  {
  id: ID!
  amount: String
  event: Event
}

# orgs can have many suborgs
# allow org to behave as Sponsor
type Organization @model  {
  id: ID!
  name: String
  images: [Image] @relation
  rating: String
  events: [Event] @relation
  suborgs: [Organization] @relation
  sponsor: Sponsor
  sponsors: [Sponsor] @relation
  description: String
  minAge: Int
  maxAge: Int
  inviteOnly: Boolean
  private: Boolean #it won't show up in public search
  isMainOrg: Bolean
}

# sponsor is an org
type Sponsor @model{
  id: ID!
  name: String
  images: [Image] @relation
  description: String
  url: String
  event: [Event] @relation  
  sponsoredOrgs: [Organization] @relation
  sponsoredPlayers: [Player] @relation
  sponsoredTeams: [Team] @relation
}

type Wager @model  {
  id: ID!
  name: String
  amount: String
  players: [Player] @relation
  eligibleEventTypes: [EventType] @relation
  private: Boolean
  events: [Event] @relation
}

type Game @model  {
  id: ID!
  hometeam: Team
  awayTeam: Team
  homegoals: Int
  awaygoals: Int
  pickup: Boolean
  event: Event
}

type Tryout @model  {
  id: ID!
  game: String
  event: Event
  events: [Event] @relation #tryout can have a pickup game
  eligibleEventTypes: [EventType] @relation
}

type League @model  {
  id: ID!
  name: String
  tournament: Tournament  
  event: Event
  events: [Event] @relation
  eligibleEventTypes: [EventType] @relation
}

type Tournament @model  {
  id: ID!
  league: League
  name: String
  groupPlay: Boolean  
  event: Event
  events: [Event] @relation
  eligibleEventTypes: [EventType] @relation
}

type Training @model  {
  id: ID!
  name: String
  event: Event
  events: [Event] @relation
  eligibleEventTypes: [Event] @relation
}

type Event @model  {#aaa
  id: ID!
  name: String
  organization:  #need org to create events? nah. allow user to create events,
                  #if user has orgs, they can select which org to create event for                
  coorganizations: [Organization] @relation
  sponsors: [Sponsor] @relation
  creator: User 
  ratings: [Rating] @relation
  images: [Image] @relation
  price: Price
  locations: [Location] @relation
  type: EventType
  payment: Payment
  training: Training
  tournament: Tournament
  league: League
  tryout: Tryout
  teams: [Team] @relation
  game: Game  
  users: [User] @relation
  #I don't think you need these since tournament 
  #can have many events but not the other way around
  # tournament: Tournament 
  # tryouts: [Tryout] @relation
  # leagues: [League] @relation
  # tournaments: [Tournament] @relation
  # trainings: [Training] @relation 
  wager: [Wager] @relation
}

type Team @model  {
  id: ID!  
  name: String
  color: String
  logo: String
  events: [Event] @relation
  images: [Image] @relation
  players: [Player] @relation    
  sponsors: [Sponsor] @relation
}

type Image @model  {
  id: ID!
  url: String
  user: User
  event: Event
  team: Team
  location: Location
  organization: Organization
  attachedModelType: ModelType
}

type GifContent @model  {
  id: ID!
}

type TextContent @model  {
  id: ID!
}

type Message @model  {
  id: ID!
  text: String
  gif: String
  image: String
  chat: String
}

type Chat @model  {
  id: ID!
  messages: String
}

type AppSubscription @model  {
  id: ID!
  tier: String
}

type Location @model  {
  id: ID!
  name: String
  secondaryName: String
  address: String
  surface: SurfaceType
  images: [Image] @relation
  fieldSize: FieldPlayerOccupancySize
  private: Boolean
  schedule: String
  latitude: Float
  longitude: Float
  events: [Event] @relation
  user: User
}

type Rating @model  {
  id: ID!
  event: Event
}

type Price @model  {
  id: ID!
  amount: String
  event: Event
}