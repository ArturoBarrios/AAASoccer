enum EventType {
  TRYOUT
  GAME
  LEAGUE
  TOURNAMENT
  TRAINING
  TEST
}

enum SurfaceType {
  TURFPOOR
  TURFOKAY
  TURFGOOD
  TURFEXCELLENT
  GRASSPOOR
  GRASSOKAY
  GRASSGOOD
  GRASSEXCELLENT
  HARDFLOOR
  SAND
  NAILS
  QUICKSAND
}

enum FieldPlayerOccupancySize {
  SMALL
  MEDIUM
  FULLSIZE
}

enum GenderType {
  MALE
  FEMALE
}

type User @model @auth(rules: [{allow: public}]) {
  id: ID!
  player: Player @hasOne
  organizer: Organizer @hasOne
  coach: Coach @hasOne
  referee: Referee @hasOne
  name: String
  phone: String
  email: String
  username: String
  birthdate: String
  gender: String
  address: String
  status: String
  last_login: Int
  last_updated: Int
  locationID: ID! @index(name: "byLocation")
  locations: [Location] @hasMany(indexName: "byUser", fields: ["id"])
}

type Coach @model @auth(rules: [{allow: public}]) {
  id: ID!
  user: User @belongsTo
}

type Referee @model @auth(rules: [{allow: public}]) {
  id: ID!
  user: User @belongsTo
}

type Organizer @model @auth(rules: [{allow: public}]) {
  id: ID!
  user: User @belongsTo
}

type Player @model @auth(rules: [{allow: public}]) {
  id: ID!
  playerRating: String
  wagerRating: String
  events: String
  competitiveLevel: String
  ratings: String
  hasRating: String
  showRating: String
  hasSubscription: String
  user: User @belongsTo
}

type Payment @model @auth(rules: [{allow: public}]) {
  id: ID!
  amount: String
}

type Organization @model @auth(rules: [{allow: public}]) {
  id: ID!
  name: String
  images: String
  rating: String
  events: String
  description: String
  ageRange: AWSJSON
  inviteOnly: Boolean
  members: String
}

type Wager @model @auth(rules: [{allow: public}]) {
  id: ID!
  name: String
  amount: String
  players: String
  eligibleEventTypes: String
  private: Boolean
  events: Event @hasOne
}

type Game @model @auth(rules: [{allow: public}]) {
  id: ID!
  hometeam: String
  awayTeam: String
  score: String
  wagers: String
  pickup: Boolean
  event: Event @hasOne
}

type Tryout @model @auth(rules: [{allow: public}]) {
  id: ID!
  players: String
  game: String
  event: Event @hasOne
  events: [Event] @hasMany(indexName: "byTryout", fields: ["id"])
  eligibleEventTypes: [Event] @manyToMany(relationName: "TryoutEvent")
}

type League @model @auth(rules: [{allow: public}]) {
  id: ID!
  name: String
  tournament: String
  teams: String
  wagers: String
  images: String
  event: Event @hasOne
  events: [Event] @hasMany(indexName: "byLeague", fields: ["id"])
  eligibleEventTypes: [Event] @manyToMany(relationName: "LeagueEvent")
}

type Tournament @model @auth(rules: [{allow: public}]) {
  id: ID!
  name: String
  groupPlay: Boolean
  teams: String
  images: String
  event: Event @hasOne
  events: [Event] @hasMany(indexName: "byTournament", fields: ["id"])
  eligibleEventTypes: [Event] @manyToMany(relationName: "TournamentEvent")
}

type Training @model @auth(rules: [{allow: public}]) {
  id: ID!
  name: String
  players: String
  event: Event @hasOne
  events: [Event] @hasMany(indexName: "byTraining", fields: ["id"])
  eligibleEventTypes: [Event] @manyToMany(relationName: "TrainingEvent")
}

type Event @model @auth(rules: [{allow: public}]) {
  id: ID!
  name: String
  organizer: String
  tryout: String
  training: String
  ratings: String
  images: String
  price: String
  location: String
  type: EventType
  locationID: ID @index(name: "byLocation")
  trainingID: ID @index(name: "byTraining")
  tournamentID: ID @index(name: "byTournament")
  leagueID: ID @index(name: "byLeague")
  tryoutID: ID @index(name: "byTryout")
  tryouts: [Tryout] @manyToMany(relationName: "TryoutEvent")
  leagues: [League] @manyToMany(relationName: "LeagueEvent")
  tournaments: [Tournament] @manyToMany(relationName: "TournamentEvent")
  trainings: [Training] @manyToMany(relationName: "TrainingEvent")
}

type Team @model @auth(rules: [{allow: public}]) {
  id: ID!
  name: String
  color: String
  logo: String
  event: String
  images: String
  players: String
  events: String
  leagues: String
  tournaments: String
}

type Image @model @auth(rules: [{allow: public}]) {
  id: ID!
  url: String
  players: String
  tournaments: String
  leagues: String
  events: String
}

type GifContent @model @auth(rules: [{allow: public}]) {
  id: ID!
}

type TextContent @model @auth(rules: [{allow: public}]) {
  id: ID!
}

type Message @model @auth(rules: [{allow: public}]) {
  id: ID!
  text: String
  gif: String
  image: String
  chat: String
}

type Chat @model @auth(rules: [{allow: public}]) {
  id: ID!
  messages: String
}

type AppSubscription @model @auth(rules: [{allow: public}]) {
  id: ID!
  tier: String
}

type Location @model @auth(rules: [{allow: public}]) {
  id: ID!
  name: String
  secondaryName: String
  address: String
  surface: SurfaceType
  images: String
  fieldSize: FieldPlayerOccupancySize
  private: Boolean
  schedule: String
  latitude: Float
  longitude: Float
  events: [Event] @hasMany(indexName: "byLocation", fields: ["id"])
  userID: ID! @index(name: "byUser")
  user: User @belongsTo
}

type Rating @model @auth(rules: [{allow: public}]) {
  id: ID!
}